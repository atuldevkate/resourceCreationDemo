AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation template to create API Gateway, Lambda function & DynamoDB with required IAM roles and policies.

Resources:
  #DynamoDB Table creation
  MyDynamoDBDemo:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: my-dynamodb-demo
      AttributeDefinitions:
        - AttributeName: vpc-name
          AttributeType: S
      KeySchema:
        - AttributeName: vpc-name
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      Tags:
        - Key: Name
          Value: my-dynamodb-demo

  #Lambda Execution Role
  MyLambdaFuncExecutionRoleDemo:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: my-lambda-policy-demo
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:Query
                  - dynamodb:Scan
                Resource: !GetAtt MyDynamoDBDemo.Arn
              - Effect: Allow
                Action:
                  - ec2:CreateVpc
                  - ec2:CreateSubnet
                  - ec2:CreateTags
                  - ec2:DescribeVpcs
                  - ec2:DescribeSubnets
                Resource: '*'
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'

  # Lambda Function
  MyLambdaFuncDemo:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: my-lambda_func-demo
      Handler: lambda_function.lambda_handler
      Role: !GetAtt MyLambdaFuncExecutionRoleDemo.Arn
      Code:
        S3Bucket: my-lambda-funcs-demo
        S3Key: final_project/my-lambda_func-demo.zip

      Runtime: python3.9
      Timeout: 60
      MemorySize: 128

  # API Gateway Rest API
  MyApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: MyApiGateway

  # Root Resource
  MyApiGatewayResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt MyApiGateway.RootResourceId
      PathPart: my_resources
      RestApiId: !Ref MyApiGateway

  # GET Method
  GetMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref MyApiGateway
      ResourceId: !Ref MyApiGatewayResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations
          - { LambdaArn: !GetAtt MyLambdaFuncDemo.Arn }

  # POST Method
  PostMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref MyApiGateway
      ResourceId: !Ref MyApiGatewayResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations
          - { LambdaArn: !GetAtt MyLambdaFuncDemo.Arn }

  # Deployment
  MyApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref MyApiGateway
      StageName: test
    DependsOn:
      - GetMethod
      - PostMethod

  # Permission for API Gateway
  ApiGatewayPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt MyLambdaFuncDemo.Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub
        arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${MyApiGateway}/*

Outputs:
  DynamoDBTableName:
    Description: DynamoDB table
    Value: !Ref MyDynamoDBDemo

  LambdaFunctionName:
    Description: Lambda function
    Value: !Ref MyLambdaFuncDemo

  LambdaExecutionRoleArn:
    Description: Lambda execution role
    Value: !GetAtt MyLambdaFuncExecutionRoleDemo.Arn

  ApiUrl:
    Value: !Sub "https://${MyApiGateway}.execute-api.${AWS::Region}.amazonaws.com/test/my_resources"
    Description: "The URL of the API Gateway"
